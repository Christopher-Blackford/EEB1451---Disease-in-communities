Linear_data <- cbind(Linear_data, Environ_num_linear)
Linear_data <- as.data.frame(Linear_data, row.names = TRUE)
ggplot(Linear_data, aes(Beta_values)) +
geom_line(aes(y = Suscep_num_linear, colour = "Suscep_num_linear")) +
geom_line(aes(y = Infect_num_linear, colour = "Infect_num_linear")) +
geom_line(aes(y = Environ_num_linear, colour = "Environ_num_linear"))
rm(list = ls())
require(deSolve)
require(rootSolve)
require(FME)
require(ggplot2)
###################TABLE OF CONTENTS
###[1] Setting up the model
###[2] Identifying settlement locations and linking to release locations
###[3] Setting up study extent you will be using to clip your larval release points to your BC study extent
###[4] Creating connectivity matrices from Con_df dataframe
###[5] Creating connectivity matrices for each depth class
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
### [1] Setting up the model
##### Model description  #####
SISmodel=function(t,y,parameters)
{
## Variables
S=y[1]; I=y[2]; E=y[3];
## Parameters
p = parameters[1];
K = parameters[2];
beta = parameters[3];
mu = parameters[4];
alpha = parameters[5];
lambda = parameters[6];
tau = parameters[7]
## Ordinary differential equations
logistic_growth <- (1 - (S + I)/K)
dSdt <- p*S*logistic_growth - beta*S*E - S * mu
dIdt <- beta*S*E - I * alpha - I * mu
dEdt <- lambda * I - tau * E
return(list(c(dSdt,
dIdt,
dEdt)));
}
###Paramater values (expect p and beta because that's what we're testing)
K <- 5000
mu <- 0.01
alpha <- 0.02
lambda <- 0.01
tau <- 0.2
## Initial state
variables0=c(S0=100,I0=1,E0=10)
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
### [2] Linear relationship between p and beta
#Looping to get range of beta values
Beta_values <- seq(0.005, 0.5, by = 0.005)
Suscep_num_linear <- NULL
Infect_num_linear <- NULL
Environ_num_linear <- NULL
for (i in Beta_values){
beta <- i
p = 10*beta
parameters=c(p,
K,
beta,
mu,
alpha,
lambda,
tau)
steadyState=runsteady(y = variables0,
fun = SISmodel,
parms = parameters)
Suscep <- steadyState$y[1]
Suscep_num_linear <- append(Suscep_num_linear, Suscep)
Infect <- steadyState$y[2]
Infect_num_linear <- append(Infect_num_linear, Infect)
Environ <- steadyState$y[3]
Environ_num_linear <- append(Environ_num_linear, Environ)
}
#Making variable window cleaner
#rm(i, p, K, beta, mu, alpha, lambda, tau)
#rm(Suscep, Infect, Environ)
#Getting data into dataframe for plotting - figure out how to do in one line
Linear_data <- cbind(Beta_values, Suscep_num_linear)
Linear_data <- cbind(Linear_data, Infect_num_linear)
Linear_data <- cbind(Linear_data, Environ_num_linear)
Linear_data <- as.data.frame(Linear_data, row.names = TRUE)
ggplot(Linear_data, aes(Beta_values)) +
geom_line(aes(y = Suscep_num_linear, colour = "Suscep_num_linear")) +
geom_line(aes(y = Infect_num_linear, colour = "Infect_num_linear")) +
geom_line(aes(y = Environ_num_linear, colour = "Environ_num_linear"))
rm(list = ls())
require(deSolve)
require(rootSolve)
require(FME)
require(ggplot2)
###################TABLE OF CONTENTS
###[1] Setting up the model
###[2] Identifying settlement locations and linking to release locations
###[3] Setting up study extent you will be using to clip your larval release points to your BC study extent
###[4] Creating connectivity matrices from Con_df dataframe
###[5] Creating connectivity matrices for each depth class
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
### [1] Setting up the model
##### Model description  #####
SISmodel=function(t,y,parameters)
{
## Variables
S=y[1]; I=y[2]; E=y[3];
## Parameters
p = parameters[1];
K = parameters[2];
beta = parameters[3];
mu = parameters[4];
alpha = parameters[5];
lambda = parameters[6];
tau = parameters[7]
## Ordinary differential equations
logistic_growth <- (1 - (S + I)/K)
dSdt <- p*S*logistic_growth - beta*S*E - S * mu
dIdt <- beta*S*E - I * alpha - I * mu
dEdt <- lambda * I - tau * E
return(list(c(dSdt,
dIdt,
dEdt)));
}
###Paramater values (expect p and beta because that's what we're testing)
K <- 5000
mu <- 0.01
alpha <- 0.02
lambda <- 0.01
tau <- 0.2
## Initial state
variables0=c(S0=100,I0=1,E0=10)
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
### [2] Linear relationship between p and beta
#Looping to get range of beta values
Beta_values <- seq(0.005, 0.1, by = 0.005)
Suscep_num_linear <- NULL
Infect_num_linear <- NULL
Environ_num_linear <- NULL
for (i in Beta_values){
beta <- i
p = 10*beta
parameters=c(p,
K,
beta,
mu,
alpha,
lambda,
tau)
steadyState=runsteady(y = variables0,
fun = SISmodel,
parms = parameters)
Suscep <- steadyState$y[1]
Suscep_num_linear <- append(Suscep_num_linear, Suscep)
Infect <- steadyState$y[2]
Infect_num_linear <- append(Infect_num_linear, Infect)
Environ <- steadyState$y[3]
Environ_num_linear <- append(Environ_num_linear, Environ)
}
#Getting data into dataframe for plotting - figure out how to do in one line
Linear_data <- cbind(Beta_values, Suscep_num_linear)
Linear_data <- cbind(Linear_data, Infect_num_linear)
Linear_data <- cbind(Linear_data, Environ_num_linear)
Linear_data <- as.data.frame(Linear_data, row.names = TRUE)
ggplot(Linear_data, aes(Beta_values)) +
geom_line(aes(y = Suscep_num_linear, colour = "Suscep_num_linear")) +
geom_line(aes(y = Infect_num_linear, colour = "Infect_num_linear")) +
geom_line(aes(y = Environ_num_linear, colour = "Environ_num_linear"))
for (i in Beta_values){
beta <- i
p = beta
parameters=c(p,
K,
beta,
mu,
alpha,
lambda,
tau)
steadyState=runsteady(y = variables0,
fun = SISmodel,
parms = parameters)
Suscep <- steadyState$y[1]
Suscep_num_linear <- append(Suscep_num_linear, Suscep)
Infect <- steadyState$y[2]
Infect_num_linear <- append(Infect_num_linear, Infect)
Environ <- steadyState$y[3]
Environ_num_linear <- append(Environ_num_linear, Environ)
}
#Making variable window cleaner
#rm(i, p, K, beta, mu, alpha, lambda, tau)
#rm(Suscep, Infect, Environ)
#Getting data into dataframe for plotting - figure out how to do in one line
Linear_data <- cbind(Beta_values, Suscep_num_linear)
Linear_data <- cbind(Linear_data, Infect_num_linear)
Linear_data <- cbind(Linear_data, Environ_num_linear)
Linear_data <- as.data.frame(Linear_data, row.names = TRUE)
ggplot(Linear_data, aes(Beta_values)) +
geom_line(aes(y = Suscep_num_linear, colour = "Suscep_num_linear")) +
geom_line(aes(y = Infect_num_linear, colour = "Infect_num_linear")) +
geom_line(aes(y = Environ_num_linear, colour = "Environ_num_linear"))
rm(list = ls())
require(deSolve)
require(rootSolve)
require(FME)
require(ggplot2)
###################TABLE OF CONTENTS
###[1] Setting up the model
###[2] Identifying settlement locations and linking to release locations
###[3] Setting up study extent you will be using to clip your larval release points to your BC study extent
###[4] Creating connectivity matrices from Con_df dataframe
###[5] Creating connectivity matrices for each depth class
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
### [1] Setting up the model
##### Model description  #####
SISmodel=function(t,y,parameters)
{
## Variables
S=y[1]; I=y[2]; E=y[3];
## Parameters
p = parameters[1];
K = parameters[2];
beta = parameters[3];
mu = parameters[4];
alpha = parameters[5];
lambda = parameters[6];
tau = parameters[7]
## Ordinary differential equations
logistic_growth <- (1 - (S + I)/K)
dSdt <- p*S*logistic_growth - beta*S*E - S * mu
dIdt <- beta*S*E - I * alpha - I * mu
dEdt <- lambda * I - tau * E
return(list(c(dSdt,
dIdt,
dEdt)));
}
###Paramater values (expect p and beta because that's what we're testing)
K <- 5000
mu <- 0.01
alpha <- 0.02
lambda <- 0.001
tau <- 0.2
## Initial state
variables0=c(S0=100,I0=1,E0=10)
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
### [2] Linear relationship between p and beta
#Looping to get range of beta values
Beta_values <- seq(0.005, 0.1, by = 0.005)
Suscep_num_linear <- NULL
Infect_num_linear <- NULL
Environ_num_linear <- NULL
for (i in Beta_values){
beta <- i
p = beta
parameters=c(p,
K,
beta,
mu,
alpha,
lambda,
tau)
steadyState=runsteady(y = variables0,
fun = SISmodel,
parms = parameters)
Suscep <- steadyState$y[1]
Suscep_num_linear <- append(Suscep_num_linear, Suscep)
Infect <- steadyState$y[2]
Infect_num_linear <- append(Infect_num_linear, Infect)
Environ <- steadyState$y[3]
Environ_num_linear <- append(Environ_num_linear, Environ)
}
#Making variable window cleaner
#rm(i, p, K, beta, mu, alpha, lambda, tau)
#rm(Suscep, Infect, Environ)
#Getting data into dataframe for plotting - figure out how to do in one line
Linear_data <- cbind(Beta_values, Suscep_num_linear)
Linear_data <- cbind(Linear_data, Infect_num_linear)
Linear_data <- cbind(Linear_data, Environ_num_linear)
Linear_data <- as.data.frame(Linear_data, row.names = TRUE)
ggplot(Linear_data, aes(Beta_values)) +
geom_line(aes(y = Suscep_num_linear, colour = "Suscep_num_linear")) +
geom_line(aes(y = Infect_num_linear, colour = "Infect_num_linear")) +
geom_line(aes(y = Environ_num_linear, colour = "Environ_num_linear"))
rm(list = ls())
require(deSolve)
require(rootSolve)
require(FME)
require(ggplot2)
###################TABLE OF CONTENTS
###[1] Setting up the model
###[2] Identifying settlement locations and linking to release locations
###[3] Setting up study extent you will be using to clip your larval release points to your BC study extent
###[4] Creating connectivity matrices from Con_df dataframe
###[5] Creating connectivity matrices for each depth class
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
### [1] Setting up the model
##### Model description  #####
SISmodel=function(t,y,parameters)
{
## Variables
S=y[1]; I=y[2]; E=y[3];
## Parameters
p = parameters[1];
K = parameters[2];
beta = parameters[3];
mu = parameters[4];
alpha = parameters[5];
lambda = parameters[6];
tau = parameters[7]
## Ordinary differential equations
logistic_growth <- (1 - (S + I)/K)
dSdt <- p*S*logistic_growth - beta*S*E - S * mu
dIdt <- beta*S*E - I * alpha - I * mu
dEdt <- lambda * I - tau * E
return(list(c(dSdt,
dIdt,
dEdt)));
}
###Paramater values (expect p and beta because that's what we're testing)
K <- 5000
mu <- 0.01
alpha <- 0.02
lambda <- 0.001
tau <- 0.2
## Initial state
variables0=c(S0=100,I0=1,E0=10)
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
### [2] Linear relationship between p and beta
#Looping to get range of beta values
Beta_values <- seq(0.005, 0.5, by = 0.005)
Suscep_num_linear <- NULL
Infect_num_linear <- NULL
Environ_num_linear <- NULL
for (i in Beta_values){
beta <- i
p = beta
parameters=c(p,
K,
beta,
mu,
alpha,
lambda,
tau)
steadyState=runsteady(y = variables0,
fun = SISmodel,
parms = parameters)
Suscep <- steadyState$y[1]
Suscep_num_linear <- append(Suscep_num_linear, Suscep)
Infect <- steadyState$y[2]
Infect_num_linear <- append(Infect_num_linear, Infect)
Environ <- steadyState$y[3]
Environ_num_linear <- append(Environ_num_linear, Environ)
}
#Making variable window cleaner
#rm(i, p, K, beta, mu, alpha, lambda, tau)
#rm(Suscep, Infect, Environ)
#Getting data into dataframe for plotting - figure out how to do in one line
Linear_data <- cbind(Beta_values, Suscep_num_linear)
Linear_data <- cbind(Linear_data, Infect_num_linear)
Linear_data <- cbind(Linear_data, Environ_num_linear)
Linear_data <- as.data.frame(Linear_data, row.names = TRUE)
ggplot(Linear_data, aes(Beta_values)) +
geom_line(aes(y = Suscep_num_linear, colour = "Suscep_num_linear")) +
geom_line(aes(y = Infect_num_linear, colour = "Infect_num_linear")) +
geom_line(aes(y = Environ_num_linear, colour = "Environ_num_linear"))
rm(list = ls())
require(deSolve)
require(rootSolve)
require(FME)
require(ggplot2)
###################TABLE OF CONTENTS
###[1] Setting up the model
###[2] Identifying settlement locations and linking to release locations
###[3] Setting up study extent you will be using to clip your larval release points to your BC study extent
###[4] Creating connectivity matrices from Con_df dataframe
###[5] Creating connectivity matrices for each depth class
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
### [1] Setting up the model
##### Model description  #####
SISmodel=function(t,y,parameters)
{
## Variables
S=y[1]; I=y[2]; E=y[3];
## Parameters
p = parameters[1];
K = parameters[2];
beta = parameters[3];
mu = parameters[4];
alpha = parameters[5];
lambda = parameters[6];
tau = parameters[7]
## Ordinary differential equations
logistic_growth <- (1 - (S + I)/K)
dSdt <- p*S*logistic_growth - beta*S*E - S * mu
dIdt <- beta*S*E - I * alpha - I * mu
dEdt <- lambda * I - tau * E
return(list(c(dSdt,
dIdt,
dEdt)));
}
###Paramater values (expect p and beta because that's what we're testing)
K <- 5000
mu <- 0.01
alpha <- 0.02
lambda <- 0.001
tau <- 0.2
## Initial state
variables0=c(S0=100,I0=1,E0=10)
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
################################################################################################################################################
### [2] Linear relationship between p and beta
#Looping to get range of beta values
Beta_values <- seq(0.005, 0.5, by = 0.005)
Suscep_num_linear <- NULL
Infect_num_linear <- NULL
Environ_num_linear <- NULL
for (i in Beta_values){
beta <- i
p = beta/10
parameters=c(p,
K,
beta,
mu,
alpha,
lambda,
tau)
steadyState=runsteady(y = variables0,
fun = SISmodel,
parms = parameters)
Suscep <- steadyState$y[1]
Suscep_num_linear <- append(Suscep_num_linear, Suscep)
Infect <- steadyState$y[2]
Infect_num_linear <- append(Infect_num_linear, Infect)
Environ <- steadyState$y[3]
Environ_num_linear <- append(Environ_num_linear, Environ)
}
#Making variable window cleaner
#rm(i, p, K, beta, mu, alpha, lambda, tau)
#rm(Suscep, Infect, Environ)
#Getting data into dataframe for plotting - figure out how to do in one line
Linear_data <- cbind(Beta_values, Suscep_num_linear)
Linear_data <- cbind(Linear_data, Infect_num_linear)
Linear_data <- cbind(Linear_data, Environ_num_linear)
Linear_data <- as.data.frame(Linear_data, row.names = TRUE)
ggplot(Linear_data, aes(Beta_values)) +
geom_line(aes(y = Suscep_num_linear, colour = "Suscep_num_linear")) +
geom_line(aes(y = Infect_num_linear, colour = "Infect_num_linear")) +
geom_line(aes(y = Environ_num_linear, colour = "Environ_num_linear"))
#Looping to get range of beta values
Beta_values <- seq(0.005, 0.5, by = 0.005)
Suscep_num_quad <- NULL
Infect_num_quad <- NULL
Environ_num_quad <- NULL
for (i in Beta_values){
beta <- i
p = 100*(beta^2)
parameters=c(p,
K,
beta,
mu,
alpha,
lambda,
tau)
steadyState=runsteady(y = variables0,
fun = SISmodel,
parms = parameters)
Suscep <- steadyState$y[1]
Suscep_num_quad <- append(Suscep_num_quad, Suscep)
Infect <- steadyState$y[2]
Infect_num_quad <- append(Infect_num_quad, Infect)
Environ <- steadyState$y[3]
Environ_num_quad <- append(Environ_num_quad, Environ)
}
#Making variable window cleaner
#rm(i, p, K, beta, mu, alpha, lambda, tau)
rm(Suscep, Infect, Environ)
#Getting data into dataframe for plotting - figure out how to do in one line
Quad_data <- cbind(Beta_values, Suscep_num_quad)
Quad_data <- cbind(Quad_data, Infect_num_quad)
Quad_data <- cbind(Quad_data, Environ_num_quad)
Quad_data <- as.data.frame(Quad_data, row.names = TRUE)
ggplot(Quad_data, aes(Beta_values)) +
geom_line(aes(y = Suscep_num_quad, colour = "Suscep_num_quad")) +
geom_line(aes(y = Infect_num_quad, colour = "Infect_num_quad")) +
geom_line(aes(y = Environ_num_quad, colour = "Environ_num_quad"))
